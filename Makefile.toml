[env]
CL_REPO = "target/CasperLabs"
CL_REPO_GIT_BRANCH = "master"

[config]
default_to_workspace = false

[tasks.prepare]
dependencies = [
    "download-casperlabs-repository",
    "pull-casperlabs-latest-dockers",
    "build-test-docker-images",
    "build-python-environment",
    "build-test-wasm-contracts"
]

[tasks.download-casperlabs-repository]
condition_script = [ "test ! -d ${CL_REPO}" ]
script = ["""
    mkdir -p target
    git clone https://github.com/CasperLabs/CasperLabs.git $CL_REPO
    # git checkout 731633620cc500a2a7f762f01b81de644bab4a7c
"""]

[tasks.pull-casperlabs-latest-dockers]
condition_script = ["""
    test -z $(docker images -q casperlabs/node:latest) || \
    test -z $(docker images -q casperlabs/execution-engine:latest) || \
    test -z $(docker images -q casperlabs/client:latest)
"""]
script = ["""
    # docker pull casperlabs/node:latest
    # docker pull casperlabs/execution-engine:latest
    # docker pull casperlabs/client:latest

    docker pull casperlabs/node:dev
    docker pull casperlabs/execution-engine:dev
    docker pull casperlabs/client:dev
    
    docker tag casperlabs/node:dev casperlabs/execution-engine:latest
    docker tag casperlabs/execution-engine:dev casperlabs/execution-engine:latest
    docker tag casperlabs/client:dev casperlabs/client:latest

"""]

[tasks.build-test-docker-images]
condition_script = ["""
    test -z $(docker images -q casperlabs/node:test) || \
    test -z $(docker images -q casperlabs/execution-engine:test) || \
    test -z $(docker images -q casperlabs/client:test)
"""]
script = ["""
    # Remove test docker images if exist. 
    test -z $(docker images -q casperlabs/node:test) || docker rmi casperlabs/node:test
    test -z $(docker images -q casperlabs/execution-engine:test) || docker rmi casperlabs/execution-engine:test
    test -z $(docker images -q casperlabs/client:test) || docker rmi casperlabs/client:test
        
    # Build EE and client test images from latest.
    docker tag casperlabs/execution-engine:latest casperlabs/execution-engine:test
    docker tag casperlabs/client:latest casperlabs/client:test

    # Download system-contracts.tar.gz.
    if ! test -f target/system-contracts.tar.gz; then
        curl http://repo.casperlabs.io/casperlabs/repo/${CL_REPO_GIT_BRANCH}/system-contracts.tar.gz -o target/system-contracts.tar.gz
    fi

    # Use CasperLabs repository to build node the test node image.
    mkdir -p ${CL_REPO}/hack/docker/.genesis/system-contracts
    tar -xzf target/system-contracts.tar.gz -C ${CL_REPO}/hack/docker/.genesis/system-contracts
    docker build -f ${CL_REPO}/hack/docker/test-node.Dockerfile -t casperlabs/node:test ${CL_REPO}/hack/docker
    rm -rf ${CL_REPO}/hack/docker/.genesis
"""]

[tasks.build-python-environment]
script = ["""
    TARGET=$(pwd)/target
    cd ${CL_REPO}/integration-testing

    # This script allows to skip long running `pipenv install`.
    # Check if installed-requirements.txt exists.
    if ! test -f $TARGET/installed-requirements.txt; then
        # If it not exists install pipenv and create installed-requirements.txt
        pipenv install --python python3.6
        pipenv lock -r > $TARGET/installed-requirements.txt
        pipenv run client/CasperLabsClient/install.sh
    else
        # If installed-requirements.txt exists, 
        # check if it reflects currently installed packages.
        INSTALLED_REQS=$(cat $TARGET/installed-requirements.txt | md5sum )
        CURRENT_REQS=$(pipenv lock -r | md5sum )
        if [ "$INSTALLED_REQS" != "$CURRENT_REQS" ]; then
            pipenv install --python python3.6
            pipenv lock -r > $TARGET/installed-requirements.txt
            pipenv run client/CasperLabsClient/install.sh
        fi
    fi
"""]

[tasks.build-test-wasm-contracts]
script = ["${CL_REPO}/integration-testing/contracts/build_contracts.sh"]

[tasks.console]
script = ["""
    cp cl_test_runner.py ${CL_REPO}/integration-testing/
    cp cl_test_context.py ${CL_REPO}/integration-testing/test

    cd ${CL_REPO}/integration-testing
    pipenv run python -i cl_test_runner.py
"""]
dependencies = [
    "clean-docker-artifacts",
    "reload"
]

[tasks.clean-docker-artifacts]
script = ["""
    cd ${CL_REPO}/integration-testing 
    pipenv run python docker_cleanup_assurance.py
"""]

[tasks.copy-tests]
script = ["""
    rm -f ${CL_REPO}/integration-testing/test/test_*.py
    cp tests/test_*.py ${CL_REPO}/integration-testing/test
"""]

[tasks.build-smart-contracts]
script = ["""
    cargo build --release
    cp target/wasm32-unknown-unknown/release/*.wasm ${CL_REPO}/integration-testing/resources
"""]

[tasks.reload]
dependencies = [
    "copy-tests",
    "build-smart-contracts"
]